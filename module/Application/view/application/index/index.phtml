    <?php echo $this->inlineScript()->prependFile($this->basePath() . '/js/three.walk.js') ?>  
    <?php echo $this->inlineScript()->prependFile($this->basePath() . '/js/stats.min.js') ?>  
    <?php echo $this->inlineScript()->prependFile($this->basePath() . '/js/three/examples/js/controls/OrbitControls.js') ?> 
    <?php echo $this->inlineScript()->prependFile($this->basePath() . '/js/three/examples/js/controls/FirstPersonControls.js') ?> 
    <?php echo $this->inlineScript()->prependFile($this->basePath() . '/js/three/examples/js/Detector.js') ?> 
    <?php echo $this->inlineScript()->prependFile('https://rawgithub.com/mrdoob/three.js/master/build/three.js') ?> 

<style>
    canvas { width: 100%; height: 100% }        
</style>
    
    
<div class="container-row">
    <div class="top-title">
        <!--<h2>Main App - JS</h2>-->   
    </div>
</div>    
<div id="container"></div>
<script>
        
     // treeHouseAnimation();
     // cubeAnimation(); 
     //firstTree();   
     
     
     
     
     //przestrzen plus poruszanie teraz jeszcze interakcja z kilkaniem w boxy 
     if( ! Detector.webgl ) Detector.addGetWebGLMessage();
     
     var container;
     var camera, controls, scene, renderer;
     var light, pointLight;
     
     var mesh;
     var material_sphere1, materail_sphere2;
     
     var sound1,sound2;
     
     var clock = new THREE.Clock();
     var Sound = function ( sources, radius, volume ) {

            var audio = document.createElement( 'audio' );

            for ( var i = 0; i < sources.length; i ++ ) {

                    var source = document.createElement( 'source' );
                    source.src = sources[ i ];

                    audio.appendChild( source );

            }

            this.position = new THREE.Vector3();

            this.play = function () {

                    audio.play();

            }

            this.update = function ( camera ) {
                    
                    
                    var distance = this.position.distanceTo( camera.position );

                    if ( distance <= radius ) {
                            audio.play();
                            audio.volume = volume * ( 1 - distance / radius );

                    } else {

                            audio.volume = 0;
                            audio.pause();

                    }

            }

     }
     init();
     animate();
     
     function init() {
        container = document.getElementById('container');
        camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 10000 );
        camera.position.set( 0, 25, 0 );
        
        controls = new THREE.FirstPersonControls( camera );

        controls.movementSpeed = 70;
        controls.lookSpeed = 0.05;
        controls.noFly = true;
        controls.lookVertical = false;
        
        scene = new THREE.Scene();
        scene.fog = new THREE.FogExp2 (0x000000, 0.0020); //mgÅ‚a
        
        light = new THREE.DirectionalLight(0xffffff);
        light.position.set(0,0.5,1).normalize(); // to check
        scene.add(light);
        
        
        
        
//        var loader = new THREE.JSONLoader();
//        var sphere = new THREE.SphereGeometry(20,32,16); //tutaj beda boxy :P zaciagane JSONEM
//        var mesh = new THREE.Mesh(geometry, material); //
        
        
        new THREE.MeshLambertMaterial({color: 0x55B663});
        loader.load('/js/models/treehouse_logo.js', function(geometry) {
            var material = new THREE.MeshLambertMaterial({color: 0x55B663});
            var mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);
         });
        
        
        
        
        // ------> elementy i textury
        var sphere = new THREE.SphereGeometry(20,32,16); //tutaj beda boxy :P zaciagane JSONEM
        
        material_sphere1 = new THREE.MeshLambertMaterial( {color: 0xffaa00, shading: THREE.FlatShading} );
        material_sphere2 = new THREE.MeshLambertMaterial( {color: 0xff2200, shading: THREE.FlatShading} );
        
        //sound spheres
        var s = 1;
        
        var mesh1 = new THREE.Mesh( sphere, material_sphere1 );
        mesh1.position.set( 50, 30, 0 );
        mesh1.scale.set( s, s, s );
        scene.add( mesh1 );      
        
        sound1 = new Sound( ['files/music/Stromae_Papaoutai.mp3'], 275,1);
        console.log(sound1);
        sound1.position.copy( mesh1.position );
      //  sound1.play();
        
        //
        
        var mesh2 = new THREE.Mesh(sphere,material_sphere2);
        mesh2.position.set(250,30,0);
        mesh2.scale.set(s,s,s);
        
        
        scene.add(mesh2);
        
        sound2 = new Sound(['files/music/Hey_Brother.mp3'], 275,1);
        sound2.position.copy(mesh2.position);
      //  sound2.play();
        
        //ground
        
        var material = new THREE.MeshLambertMaterial({color: 0x7f7566, wireframe:true, wireframeLinewidth:1});
        mesh = new THREE.Mesh(new THREE.PlaneGeometry(1000,1000,100,100), material); // to check
        mesh.position.y = 0.1;
        mesh.rotation.x = - Math.PI / 2;
        scene.add(mesh);
        
        //renderer
        
        renderer = new THREE.WebGLRenderer({antialias: true});
        renderer.setSize(window.innerWidth, window.innerHeight);
        
        container.innerHTML = "";
        container.appendChild(renderer.domElement); //canvas
        
        //listener
        window.addEventListener('resize', onWindowResize, false);                      
     }
     
     function onWindowResize() {
        camera.aspect = window.innerWidth/window.innerHeight;
        camera.updateProjectionMatrix();
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        controls.handleResize();
     }
     
     function animate() {
         requestAnimationFrame(animate);
         render();
     }
     
     function render() {
         var delta = clock.getDelta(); // check
         var time = clock.getElapsedTime()*5; //check
         
         controls.update(delta);
         
         material_sphere1.color.setHSL(0.0, 0.3 + 0.7 * (1+ Math.cos(time)) /2, 0.5);
         material_sphere2.color.setHSL(0.0, 0.3 + 0.7 * (1+ Math.cos(time)) /2, 0.5);
         
         renderer.render(scene,camera);
         sound1.update(camera);
         sound2.update(camera);
     }
       
   
    </script>
